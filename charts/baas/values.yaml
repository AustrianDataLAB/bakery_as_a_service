
# From rancher app form
customFqdn: "from.rancher.app.questions"
customName: "from.rancher.app.questions"
customEmail: "from.rancher.app.questions"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: "bakery-as-a-service"

frontend:
  name: baas-frontend
  replicaCount: 1
  service:
    name: service-baas-frontend
    port: 80
    type: ClusterIP
  image:
    repository: ghcr.io/austriandatalab/baas-frontend
    tag: main
    pullPolicy: Always
  resources:
    limits:
      cpu: "500m"
      memory: 512Mi
    requests:
      cpu: "50m"
      memory: 64Mi
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  ingress:
    name: baas-frontend-ingress
    enabled: true
    className: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-cluster-issuer
    hosts:
      - host: baas.caas-0024.dev.austrianopencloudcommunity.org
        paths:
          - path: /
            pathType: ImplementationSpecific
        backend:
          service:
            name: service-baas-frontend
            port:
              number: 8055
    tls:
      - hosts:
          - baas.caas-0024.dev.austrianopencloudcommunity.org
        secretName: tls-baas-frontend-ingress

directus:
  name: baas-backend
  replicaCount: 1
  service:
    name: service-baas-backend
    port: 8055
    type: ClusterIP
  image:
    repository: directus/directus
    tag: "10.10.5"
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: "500m"
      memory: 512Mi
    requests:
      cpu: "50m"
      memory: 64Mi
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  key: "replace-with-random-value"
  secret: "replace-with-random-value"
  admin:
    email: "admin@example.com"
    password: "admin"
  client: "pg"
  websockets: true
  ingress:
    name: baas-admin-ingress
    enabled: true
    className: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-cluster-issuer
    hosts:
      - host: baas-admin.caas-0024.dev.austrianopencloudcommunity.org
        paths:
          - path: /
            pathType: ImplementationSpecific
        backend:
          service:
            name: service-baas-backend
            port:
              number: 8055
    tls:
      - hosts:
          - baas-admin.caas-0024.dev.austrianopencloudcommunity.org
        secretName: tls-baas-admin-ingress

document:
  name: baas-document
  replicaCount: 1
  service:
    name: service-baas-document
    port: 80
    type: ClusterIP
  image:
    repository: ghcr.io/austriandatalab/baas-document
    tag: main
    pullPolicy: Always
  resources:
    limits:
      cpu: "500m"
      memory: 512Mi
    requests:
      cpu: "50m"
      memory: 64Mi
  restartPolicy: Always
  terminationGracePeriodSeconds: 30

postgres:
  service:
    name: service-baas-backend-db
    port: 5432
    type: ClusterIP
  name: baas-backend-db
  replicas: 1
  storage: 4Gi
  accessModes:
    - ReadWriteOnce
  user:
    name: "postgres"
    password: "postgres"
  database: "directus"
  data: /var/lib/postgresql/data/pgdata
  image:
    repository: postgres
    tag: "16.2"
    pullPolicy: IfNotPresent
  liveness:
    command: "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"
  resources:
    limits:
      cpu: "500m"
      memory: 1G
    requests:
      cpu: "50m"
      memory: 1G
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  volumes:
    - name: baas-backend-db
      mount: /var/lib/postgresql/
      claim: baas-backend-db

valkey:
  enable: true

  # no replicas for simplicity
  architecture: standalone

  # use password from existing secret
  auth:
    enabled: true
    password: "replace-with-random-value"
