
---
# Volume for postgres
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: baas-backend-db
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi

---

# Directus deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: baas-backend
spec:
  progressDeadlineSeconds: 60
  replicas: 1
  selector:
    matchLabels:
      servicename: baas-backend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        servicename: baas-backend
    spec:
      containers:
      - env:
        - name: KEY
          value: "replace-with-random-value"
        - name: SECRET
          value: "replace-with-random-value"
        - name: ADMIN_EMAIL
          value: "admin@example.com"
        - name: ADMIN_PASSWORD
          value: "admin"
        - name: DB_CLIENT
          value: "pg"
        - name: DB_HOST
          value: "service-baas-backend-db"
        - name: DB_PORT
          value: "5432"
        - name: DB_DATABASE
          value: "directus"
        - name: DB_USER
          value: "postgres"
        - name: DB_PASSWORD
          value: "postgres"
        - name: WEBSOCKETS_ENABLED
          value: "true"
        name: baas-backend
        image: directus/directus:10.10.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /server/health
            port: 8055
            scheme: HTTP
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "500m"
            memory: 512Mi
          requests:
            cpu: "50m"
            memory: 64Mi
        #volumeMounts:
        #- mountPath: /pv
        #  name: baas-backend
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      #volumes:
      #- name: baas-backend
      #  persistentVolumeClaim:
      #    claimName: baas-backend

---
# Postgres deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: baas-backend-db
spec:
  progressDeadlineSeconds: 60
  replicas: 1
  selector:
    matchLabels:
      servicename: baas-backend-db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        servicename: baas-backend-db
    spec:
      containers:
      - env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "directus"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        name: baas-backend
        image: postgres:16.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
              - "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"
          failureThreshold: 3
          initialDelaySeconds: 3
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "500m"
            memory: 1G
          requests:
            cpu: "50m"
            memory: 1G
        volumeMounts:
        - mountPath: /var/lib/postgresql/
          name: baas-backend-db
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
      - name: baas-backend-db
        persistentVolumeClaim:
          claimName: baas-backend-db

---
apiVersion: v1
kind: Service
metadata:
  name: service-baas-backend
spec:
  type: ClusterIP
  ports:
  - port: 8055 # exposed port reachable by other pods
    targetPort: 8055 # port inside container 
    protocol: TCP
    name: http
  selector:
    servicename: baas-backend # Select member-pods of this service

---
# Ingress + TLS (with letsencrypt auto cert creation) to expose the Directus Admin UI
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-cluster-issuer
  name: baas-admin-ingress
spec:
  ingressClassName: nginx
  rules:
    - host: baas-admin.caas-0024.dev.austrianopencloudcommunity.org
      http:
        paths:
          - backend:
              service:
                name: service-baas-backend
                port:
                  number: 8055
            path: /
            pathType: ImplementationSpecific
  tls:
    - hosts:
        - baas-admin.caas-0024.dev.austrianopencloudcommunity.org
      secretName: tls-baas-admin-ingress

---
apiVersion: v1
kind: Service
metadata:
  name: service-baas-backend-db
spec:
  type: ClusterIP
  ports:
  - port: 5432 # exposed port reachable by other pods
    targetPort: 5432 # port inside container 
    protocol: TCP
    name: db-port
  selector:
    servicename: baas-backend-db # Select member-pods of this service

# ---
# apiVersion: extensions/v1beta1
# kind: Ingress
# metadata:
#   name: ingress-baas-backend
#   annotations:
#     nginx.ingress.kubernetes.io/proxy-body-size: "30m"
# spec:
#   rules:
#   - host: {instance_fulldomain}
#     http:
#       paths:
#       - backend:
#           serviceName: service-baas-backend
#           servicePort: 8080
#   tls:
#   - secretName: {instance_domainsecret}


